--- exact-image-0.9.1/codecs/png.cc.orig
+++ exact-image-0.9.1/codecs/png.cc
@@ -17,6 +17,7 @@
 
 #include <stdlib.h>
 #include <png.h>
+#include <zlib.h>
 
 #include <iostream>
 
@@ -59,6 +60,7 @@
   png_infop info_ptr;
   png_uint_32 width, height;
   int bit_depth, color_type, interlace_type;
+  int num_trans;
   
   png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING,
 				   NULL /*user_error_ptr*/,
@@ -71,7 +73,7 @@
   /* Allocate/initialize the memory for image information.  REQUIRED. */
   info_ptr = png_create_info_struct(png_ptr);
   if (info_ptr == NULL) {
-    png_destroy_read_struct(&png_ptr, png_infopp_NULL, png_infopp_NULL);
+    png_destroy_read_struct(&png_ptr, (png_infopp)NULL, (png_infopp)NULL);
     return 0;
   }
   
@@ -82,7 +84,7 @@
   
   if (setjmp(png_jmpbuf(png_ptr))) {
     /* Free all of the memory associated with the png_ptr and info_ptr */
-    png_destroy_read_struct(&png_ptr, &info_ptr, png_infopp_NULL);
+    png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL);
     /* If we get here, we had a problem reading the file */
     return 0;
   }
@@ -99,12 +101,12 @@
   png_read_info (png_ptr, info_ptr);
   
   png_get_IHDR (png_ptr, info_ptr, &width, &height, &bit_depth, &color_type,
-		&interlace_type, int_p_NULL, int_p_NULL);
+		&interlace_type, (int*)NULL, (int*)NULL);
   
   image.w = width;
   image.h = height;
   image.bps = bit_depth;
-  image.spp = info_ptr->channels;
+  image.spp = png_get_channels(png_ptr, info_ptr);
   
   png_uint_32 res_x, res_y;
   res_x = png_get_x_pixels_per_meter(png_ptr, info_ptr);
@@ -119,11 +121,13 @@
    * (not useful if you are using png_set_packing). */
   // png_set_packswap(png_ptr);
 
+  png_get_tRNS(png_ptr, info_ptr, NULL, &num_trans, NULL);
+
   /* Expand paletted colors into true RGB triplets */
   if (color_type == PNG_COLOR_TYPE_PALETTE) {
     png_set_palette_to_rgb(png_ptr);
     image.bps = 8;
-    if (info_ptr->num_trans)
+    if (num_trans)
       image.spp = 4;
     else
       image.spp = 3;
@@ -196,11 +200,11 @@
   for (int pass = 0; pass < number_passes; ++pass)
     for (unsigned int y = 0; y < height; ++y) {
       row_pointers[0] = image.getRawData() + y * stride;
-      png_read_rows(png_ptr, row_pointers, png_bytepp_NULL, 1);
+      png_read_rows(png_ptr, row_pointers, (png_bytepp)NULL, 1);
     }
   
   /* clean up after the read, and free any memory allocated - REQUIRED */
-  png_destroy_read_struct(&png_ptr, &info_ptr, png_infopp_NULL);
+  png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL);
   
   /* that's it */
   return true;
@@ -224,7 +228,7 @@
   /* Allocate/initialize the memory for image information.  REQUIRED. */
   info_ptr = png_create_info_struct(png_ptr);
   if (info_ptr == NULL) {
-    png_destroy_write_struct(&png_ptr, png_infopp_NULL);
+    png_destroy_write_struct(&png_ptr, (png_infopp)NULL);
     return false;
   }
   
@@ -244,7 +248,7 @@
   else if (quality > Z_BEST_COMPRESSION) quality = Z_BEST_COMPRESSION;
   png_set_compression_level(png_ptr, quality);
   
-  png_info_init (info_ptr);
+  //png_info_init (info_ptr);
   
   /* Set up our STL stream output control */ 
   png_set_write_fn (png_ptr, stream, &stdstream_write_data, &stdstream_flush_data);
